name: CI/CD Pipeline

# Déclencheur : lance le pipeline sur un push vers la branche principale
on:
  push:
    branches: 
      - main

jobs:
  # Job pour la construction de l'application
  build:
    runs-on: ubuntu-latest
    container: 
      image: node:16   # Exemple avec une image Docker Node.js version 16
      options: --workdir /app  # Définit le dossier de travail dans le conteneur
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cacher le fichier CHANGELOG.md entre les jobs
      - name: Cache CHANGELOG.md
        uses: actions/cache@v3
        with:
          path: CHANGELOG.md  # Chemin du fichier à mettre en cache
          key: ${{ runner.os }}-changelog-${{ github.sha }}  # Clé de cache unique basée sur le SHA du commit
          restore-keys: |
            ${{ runner.os }}-changelog-

      # Exemple de commande pour construire l'application
      - name: Build application
        run: echo "build successful"

  # Job pour l'exécution des tests
  test:
    runs-on: ubuntu-latest
    needs: build   # Exécution après le job de build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Restaurer le cache pour CHANGELOG.md
      - name: Restore CHANGELOG.md cache
        uses: actions/cache@v3
        with:
          path: CHANGELOG.md
          key: ${{ runner.os }}-changelog-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-changelog-

      - name: Run tests
        run: echo "Tests successful..."  # Commande simulant les tests

  # Job pour le déploiement
  deploy:
    runs-on: ubuntu-latest
    needs: test   # Exécution après le job de test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Restaurer le cache pour CHANGELOG.md
      - name: Restore CHANGELOG.md cache
        uses: actions/cache@v3
        with:
          path: CHANGELOG.md
          key: ${{ runner.os }}-changelog-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-changelog-

      - name: Deploy application
        env:
          MY_VARIABLE: ${{ vars.MY_VARIABLE }}
        run: echo "Deploying the application $MY_VARIABLE"  # Commande simulant le déploiement

  # Job de notification par e-mail en cas d'échec
  notify:
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.example.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: GitHub Actions Failure Notification
        to: rouguiya1998@gmail.com
        from: github-actions@example.com
        body: |
          The GitHub Actions workflow has failed.
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Job: ${{ github.job }}
          Commit: ${{ github.sha }}
          Author: ${{ github.event.head_commit.author.name }}
          Message: ${{ github.event.head_commit.message }}

